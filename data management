
data <- read_excel("/df.xlsx")
plot_pattern(data,square = TRUE,rotate = TRUE,npat = 7)
data <- na.omit(data)
data$Year <- as.factor(data$Year)

unique(data$Year)
unique(data$人群分类)
unique(data$疾病名称)
unique(data$病例分类)

data <- data %>%
  mutate(人群分类 = str_replace(人群分类, "^其他:.*$", "其他"))
data <- data %>%
  filter(人群分类 != "不详")
#df1 <-  data[1:100,]
#writexl::write_xlsx(df1,"template.xlsx")
#2005-2010,2011-2023


##########################

summary_data <- data %>%
  group_by(Year, 疾病名称) %>%
  summarise(Cases = n(), .groups = 'drop')


wide_data <- summary_data %>%
  pivot_wider(names_from = 疾病名称, values_from = Cases, values_fill = list(Cases = 0))


wide_data <- wide_data %>%
  mutate(合计 = rowSums(select(., -Year)))



data_2005_2010 <- wide_data %>% filter(Year %in% 2005:2010)
data_2011_2023 <- wide_data %>% filter(Year %in% 2011:2023)


total_2005_2010 <- data_2005_2010 %>%
  summarise(across(-Year, sum, na.rm = TRUE)) %>%
  mutate(Year = "2005-2010 合计")

total_2011_2023 <- data_2011_2023 %>%
  summarise(across(-Year, sum, na.rm = TRUE)) %>%
  mutate(Year = "2011-2023 合计")


final_data_2005_2010 <- bind_rows(data_2005_2010, total_2005_2010)
final_data_2011_2023 <- bind_rows(data_2011_2023, total_2011_2023)

final_data <- bind_rows(final_data_2005_2010, final_data_2011_2023)

ft <- flextable(final_data)

# You can add formatting options like this:
ft <- set_table_properties(ft, width = 0.8, layout = "autofit")

# Apply a theme or manually format headers and values
ft <- theme_box(ft)
ft <- bold(ft, part = "header")  # Make headers bold
ft <- autofit(ft)
writexl::write_xlsx(final_data,"ft.xlsx")
####################################
data <- data %>%
  mutate(职业分类 = case_when(
    人群分类 %in% c("农民") ~ "农民",
    人群分类 %in% c("民工", "工人", "海员及长途驾驶员") ~ "工人",
    人群分类 %in% c("干部职员") ~ "干部职员",
    人群分类 %in% c("散居儿童", "学生", "幼托儿童", "教师") ~ "学生",
    人群分类 %in% c("家务及待业") ~ "家务及待业",
    人群分类 %in% c("离退人员") ~ "离退人员",
    人群分类 %in% c("商业服务", "公共场所服务员", "餐饮食品业") ~ "商业服务",
    TRUE ~ "其他"  
  ))

data$Year <- as.numeric(data$Year)
data$Gender <- as.factor(data$Gender)
data$职业分类 <- as.factor(data$职业分类)

ds <- data %>% mutate(Cate = case_when(Year <= 2010 ~ "0",
                                       Year > 2010 ~ "1"))
res <- descrTable(Cate~.,data= ds)
createTable(res, show.ratio=TRUE)
export2word(res, file = "compare.docx")
#####################################
sapply(data,class)

monthly_cases <- data %>%
  dplyr::mutate(Period = ifelse(Year >= 2005 & Year <= 2010, "2005-2010", "2011-2023")) %>%
  dplyr::group_by(Period, month) %>%
  dplyr::summarize(Cases = n(), .groups = "drop")

better_colors <- c("2005-2010" = "#FC4E07", "2011-2023" = "#00BFC4")


ggplot(monthly_cases, aes(x = month, y = Cases, color = Period, group = Period)) +
  geom_line(size = 1.2) +  
  geom_point(size = 3, shape = 21, fill = "white") + 
  scale_x_continuous(breaks = 1:12, labels = 1:12) + 
  scale_color_manual(values = better_colors) + 
  labs(
    title = "Monthly Malaria Cases by Period",
    x = "Month",
    y = "Number of Cases",
    color = "Period"
  ) +
  theme_minimal(base_size = 14) + 
  theme(
    panel.grid.major = element_line(color = "gray80", linetype = "dotted"),  
    panel.grid.minor = element_blank(),  
    plot.title = element_text(face = "bold"),  
    legend.position = "top"  #
  )

################################
separate value by commma and mutate into 4 columns by ID
library(tidyr)
library(dplyr)
library(stringr)
df <- read_excel("C:/Desktop/df.xlsx")
colnames(df)

df_new <- df %>%
  separate(dia, into = paste("dia", 1:4, sep="_"), sep = "，")
print(df_new)

build a 'drug map' to replace certain value in the data
drug_map <- c("非洛地平" = "CCB",
              "缬沙坦" = "ARB",
              "替米沙坦氢氯噻嗪" = "复方",
              "苯磺酸左氨氯地平" = "CCB",
              "厄贝沙坦" = "ARB",
              "缬沙坦氢氯噻嗪" = "复方",
              "琥珀酸美托洛尔" = "β-受体阻滞剂",
              "坎地氢噻" = "复方",
              "苯磺酸氨氯地平" = "CCB",
              "马来酸左氨氯地平" = "CCB",
              "厄贝沙坦氢氯噻嗪" = "复方",
              "酒石酸美托洛尔" = "β-受体阻滞剂",
              "氯沙坦钾氢氯噻嗪" = "复方",
              "卡维地洛" = "β-受体阻滞剂",
              "硝苯地平" = "CCB",
              "吲达帕胺" = "利尿药",
              "替米沙坦" = "ARB")
df_chai <- df_new %>%
  mutate(across(starts_with("dia"), ~str_replace_all(., drug_map)))
# add value wtih '+' then calculate freq and percentage
df <- df %>%
  mutate(dia_combined = pmap_chr(select(., dia_1:dia_4), ~ paste(sort(c(...)), collapse = "+"))) %>%
  mutate(dia_combined = gsub("\\+NA|NA\\+|\\+$", "", dia_combined))

df_summary <- df %>%
  count(dia_combined) %>%
  mutate(percentage = round(n / sum(n) * 100, 2)) %>%
  arrange(desc(n))

df_summary <- rbind(df_summary, data.frame(dia_combined = "Total", n = sum(df_summary$n), percentage = 100))

colnames(df_summary) <- c("药物组合", "频数", "百分比(%)")


strata <- list("Overall" = df)

labels <- list(
  variables = list(dia_combined = "药物组合")
)

table1_output <- capture.output(table1(strata, labels, groupspan = c(1)))

table1_html <- paste0("<table>", paste0(table1_output, collapse = ""), "</table>")

cat(table1_html)
###

drugs <- c("复方", "CCB", "ARB", "β-受体阻滞剂", "利尿剂")

df_freq <- df %>%
  select(starts_with("dia_")) %>%
  pivot_longer(everything(), names_to = "variable", values_to = "value") %>%
  filter(value %in% drugs)

strata <- list("Overall" = df_freq)

labels <- list(
  variables = list(value = "药物")
)

table1_output <- capture.output(table1(strata, labels, groupspan = c(1)))

table1_html <- paste0("<table>", paste0(table1_output, collapse = ""), "</table>")

cat(table1_html)
######################################
library(readxl)
library(dplyr)
library(tidyr)

total <- read_excel("C:/Users/Lu/Desktop/chim/total.xlsx")
qm <- read_excel("C:/Users/Lu/Desktop/chim/qm.xlsx")
total_updated <- total %>%
  left_join(qm, by = "姓名") 

writexl::write_xlsx(total_updated,"df.xlsx")

####################################
df <- read_excel("C:/Users/Lu/Desktop/chim/df.xlsx")
df <- df %>%
  mutate(across(c(期中卷分, 期末卷分), ~replace_na(., 0)))
df <- df %>%
  mutate(总分 = 期中卷分 * 0.4 + 期末卷分 * 0.6)

df <- df %>%
  arrange(desc(总分))


threshold_A <- quantile(df$总分, probs = 0.67, type = 1)  # Top 33%
threshold_B <- quantile(df$总分, probs = 0.33, type = 1)  # Next 33%

# Create a new column 'Grade' based on these thresholds
df <- df %>%
  mutate(Grade = case_when(
    总分 > threshold_A ~ 'A',
    总分 > threshold_B ~ 'B',
    TRUE ~ 'C'
  ))
colnames(df)

df <- df %>%
  mutate(期中名次 = rank(-期中卷分, ties.method = "min"),  # Rank for mid-term scores, "-" for descending order
         期末名次 = rank(-期末卷分, ties.method = "min"),  # Rank for final exam scores
         总分名次 = rank(-总分, ties.method = "min"))     # Rank for total scores
writexl::write_xlsx(df,"final.xlsx")
# View the first few rows to verify the new rank columns
head(df)

data <- read_excel("C:/Users/Lu/Desktop/chim/df_total.xlsx")
clean_data <- data %>% select(班级, 姓名, 期中卷分, 期末卷分, 总分)

# 计算每个班级的平均分
class_averages <- clean_data %>%
  group_by(班级) %>%
  summarise(期中平均分 = mean(期中卷分), 期末平均分 = mean(期末卷分), 总分平均分 = mean(总分))

# 绘制柱状图
ggplot(class_averages, aes(x = 班级)) +
  geom_bar(aes(y = 期中平均分), stat = "identity", fill = "blue", position = position_dodge()) +
  geom_bar(aes(y = 期末平均分), stat = "identity", fill = "red", position = position_dodge()) +
  labs(title = "各班级期中与期末平均分数比较", x = "班级", y = "平均分数") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

long_data <- clean_data %>%
  pivot_longer(cols = c(期中卷分, 期末卷分), names_to = "考试", values_to = "分数")

# 绘制箱线图
a <- ggplot(long_data, aes(x = 班级, y = 分数, fill = 考试)) +
  geom_boxplot() +
  labs(title = "各班级期中与期末考试分数分布", x = "班级", y = "分数") +
  theme_minimal() +
  theme(axis.text.x = element_text(hjust = 1)) + 
  scale_x_discrete(labels = c("六年级11班" = "11班", "六年级13班" = "13班", "六年级14班" = "14班", "六年级9班" = "9班"))
ggsave("final.jpg",a)

